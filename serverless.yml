service: dynamodb-crud-api-lifechain

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: eu-west-2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.recordsTableName}

custom:
  recordsTableName: records-table-lifechain

plugins:
  - serverless-iam-roles-per-function

functions:
  getRecord:
    handler: api.getRecord
    name: get-record
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: record/{recordId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt RecordsTable.Arn
  createRecord:
    handler: api.createRecord
    name: create-record
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: record
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt RecordsTable.Arn
  updateRecord:
    handler: api.updateRecord
    name: update-record
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: record/{recordId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt RecordsTable.Arn
  deleteRecord:
    handler: api.deleteRecord
    name: delete-record
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: record/{recordId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt RecordsTable.Arn
  getAllRecords:
    handler: api.getAllRecords
    name: get-all-records
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: records
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt RecordsTable.Arn

resources:
  Resources:
    RecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.recordsTableName}
        AttributeDefinitions:
          - AttributeName: recordId
            AttributeType: S
        KeySchema:
          - AttributeName: recordId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1